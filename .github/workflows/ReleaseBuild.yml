name: ReleaseBuild

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  SOLUTION_FILE_PATH: SubtitleFontHelper.sln
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-2022

    steps:
    # 1. 检出代码，并确保递归地克隆所有子模块，并获取完整历史记录
    - name: Checkout repository and submodules (with full history)
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0

    # 2. 设置 MSBuild 和 NuGet 工具
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2

    # 3. 编译 vcpkg 工具自身
    - name: Bootstrap vcpkg
      working-directory: ${{ env.VCPKG_ROOT }}
      run: bootstrap-vcpkg.bat
      shell: cmd

    # 4. 将 vcpkg 添加到 PATH
    - name: Add vcpkg to PATH
      run: echo "${{ env.VCPKG_ROOT }}" >> $env:GITHUB_PATH
      shell: pwsh

    # 5. 还原项目的 NuGet 包
    - name: Restore NuGet packages
      run: nuget restore ${{ env.SOLUTION_FILE_PATH }}

    # 6. 使用 vcpkg 安装 C++ 依赖
    - name: Install vcpkg dependencies
      run: |
        vcpkg install --triplet x86-windows-static-md
        vcpkg install --triplet x64-windows-static-md

    # 7. 将 vcpkg 与 MSBuild 集成
    - name: Vcpkg integrate install
      run: vcpkg integrate install

    # 8. 构建项目
    - name: Build x86
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=x86 ${{env.SOLUTION_FILE_PATH}}
      
    - name: Build x64
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=x64 ${{env.SOLUTION_FILE_PATH}}

    # 9. 复制构建产物
    - name: Copy files
      shell: pwsh
      run: .\copyFiles.ps1

    # 10. 上传构建产物
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ReleaseBuild
        path: ReleaseBuild\
